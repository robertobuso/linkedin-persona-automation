services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: linkedin_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Main FastAPI Application
  app:
    build:
      context: .  
      dockerfile: ./backend/Dockerfile 
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/linkedin_automation
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - PYTHONPATH=/app 
      - POSTGRES_USER=postgres
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app          
      - ./backend:/app/backend  
      - ./alembic:/app/alembic  
      - ./alembic.ini:/app/alembic.ini 
    restart: unless-stopped
    entrypoint: ["/app/backend/entrypoint.sh"]
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - app-network

  # Frontend (Nginx + React)
  frontend:
    build: ./frontend
    ports:
      - "80:80"
      - "3000:80"  # Alternative port for development
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: celery -A app.core.celery_app worker --loglevel=info 
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/linkedin_automation
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - PYTHONPATH=/app # To find the 'app' package for your Python code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./backend:/app/backend
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    restart: unless-stopped
    networks:
      - app-network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: celery -A app.core.celery_app beat --loglevel=info # This path needs to be correct
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/linkedin_automation
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - PYTHONPATH=/app # To find the 'app' package for your Python code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./backend:/app/backend
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge